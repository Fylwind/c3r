#!/bin/sh
### BEGIN INIT INFO
# Provides:          c3r
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: c3r
# Description:       c3r
### END INIT INFO

# A heavily modified init script that was originally from:
#
#   http://wiki.znc.in/Running_ZNC_as_a_system_daemon
#
# Run this after the first installation to activate the init script:
#
#     update-rc.d c3r defaults

PATH=/sbin:/usr/sbin:/bin:/usr/bin
name=c3rd
desc=$name
user=$name
group=$name
daemon=/usr/bin/$name
piddir=/var/run/$name
pidfile=$piddir/$name.pid
script=/etc/init.d/$name

command=$1

# Additional arguments for the daemon
set --

# Exit if the package is not installed
[ -x "$daemon" ] || exit 0

# Read configuration variable file if it is present
[ -r "/etc/default/$name" ] && . "/etc/default/$name"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

# Return
#   0 if daemon has been started
#   1 if daemon was already running
#   2 if daemon could not be started
do_start() {
    mkdir -p "$piddir"
    chown "$user:$group" "$piddir"
    start-stop-daemon >/dev/null --start --quiet --pidfile "$pidfile" \
                      --exec "$daemon" --test --chuid "$user"  || return 1
    start-stop-daemon >/dev/null --start --quiet --pidfile "$pidfile" \
                      --exec "$daemon" --chuid "$user" -- "$@" || return 2
}

# Return
#   0 if daemon has been stopped
#   1 if daemon was already stopped
#   2 if daemon could not be stopped
#   other if a failure occurred
do_stop() {
    x=0
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \
                      --pidfile "$pidfile" --name "$name" --chuid "$user" || {
        x=$?
        if [ $x -eq 2 ]
        then return 2
        fi
    }
    # Wait for children to finish too if this is a daemon that forks
    # and if the daemon is only ever run from this initscript.
    # If the above conditions are not satisfied then add some other code
    # that waits for the process to drop all resources that could be
    # needed by services started subsequently.  A last resort is to
    # sleep for some time.
    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 \
                      --exec "$daemon" --chuid "$user" ||
        if [ $? -eq 2 ]
        then return 2
        fi
    # Many daemons don't delete their pidfiles when they exit.
    rm -f "$pidfile"
    return $x
}

# Send SIGHUP to the daemon/service
do_reload() {
    start-stop-daemon --stop --signal 1 --quiet --pidfile "$pidfile" \
                      --name "$name" --chuid "$user" || :
}

# Call the given command if `VERBOSE` is not "no"
if_verbose() {
    [ "$VERBOSE" = no ] || "$@"
}

# Call the given command, ignoring the exit code if it's 1
allow_exit1() {
    "$@" || {
        x=$?
        [ $x -eq 1 ] && return 0 || return $x
    }
}

case $command in
    start)
        if_verbose log_daemon_msg "Starting $desc" "$name"
        if allow_exit1 do_start "$@"
        then if_verbose log_end_msg 0
        else if_verbose log_end_msg 1
        fi
        ;;
    stop)
        if_verbose log_daemon_msg "Stopping $desc" "$name"
        if allow_exit1 do_stop
        then if_verbose log_end_msg 0
        else if_verbose log_end_msg 1
        fi
        ;;
    status)
        status_of_proc -p "$pidfile" "$daemon" "$name"
        ;;
    reload)
        log_daemon_msg "Reloading $desc" "$name"
        do_reload
        log_end_msg 0
        ;;
    restart)
        log_daemon_msg "Restarting $desc" "$name"
        if allow_exit1 do_stop
        then
            if do_start "$@"
            then log_end_msg 0
            else log_end_msg 1
            fi
        else
            # Failed to stop
            log_end_msg 1
        fi
        ;;
    *)
        printf >&2 "Usage: %s {status|[re]start|stop|reload}\n" "$script"
        exit 3
        ;;
esac
