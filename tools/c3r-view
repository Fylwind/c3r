#!/usr/bin/env python
from __future__ import unicode_literals
import argparse, contextlib, io, itertools, \
       json, signal, sqlite3, subprocess, sys

def identity_function(x):
    return x

def rerender_time(t):
    return t[:19]

def cache_func(filter=lambda x: True):
    def inner(func):
        cache = {}
        def wrapped_func(*args, **kwargs):
            key = (tuple(args), tuple(sorted(kwargs.items())))
            try:
                return cache[key]
            except KeyError:
                pass
            value = func(*args, **kwargs)
            if filter(value):
                cache[key] = value
            return value
        return wrapped_func
    return inner

def wrap_lines(string, prefix="", suffix=""):
    return "\n".join(prefix + line + suffix for line in string.split("\n"))

def wrap_pipe_as_text_file(pipe, mode, *args, **kwargs):
    pipe = Wrapper(pipe)
    if mode == "r":
        readable = True
    elif mode == "w":
        readable = False
    else:
        raise ValueError("invalid mode: " + repr(mode))
    if not hasattr(pipe, "readable"):
        pipe.readable = lambda: readable
    if not hasattr(pipe, "writable"):
        pipe.writable = lambda: not readable
    if not hasattr(pipe, "seekable"):
        pipe.seekable = lambda: False
    return io.TextIOWrapper(pipe, *args, **kwargs)

@contextlib.contextmanager
def pager():
    p = subprocess.Popen(["less", "-R"], stdin=subprocess.PIPE)
    yield wrap_pipe_as_text_file(p.stdin, "w")
    p.stdin.close()
    p.wait()                            # needed otherwise pager will exit

def json_canonical(data, ensure_ascii=False, sort_keys=True, **kwargs):
    return json.dumps(
        data,
        ensure_ascii=ensure_ascii,
        sort_keys=sort_keys,
        **kwargs
    )

def json_pretty(data, ensure_ascii=False):
    return json_canonical(data, indent=4, separators=(",", ": "),
                          ensure_ascii=ensure_ascii)

class JSONObject(object):

    def __init__(self, data):
        self.__dict__ = data

    def __str__(self):
        if getattr(bytes, "encode"):
            return self.pretty(ensure_ascii=True).encode("ascii")
        return self.pretty()

    def pretty(self, ensure_ascii=False):
        return json_pretty(vars(self), ensure_ascii=ensure_ascii)

class User(JSONObject):
    pass

class Status(JSONObject):
    pass

def parse_status(time, user_id, id, text, data, reply_user_id,
                 reply_status_id, rt_user_id, rt_id):
    data = json.loads(data)
    data["time"] = time
    data["user_id"] = user_id
    data["id"] = id
    data["text"] = text
    data["reply_user_id"] = reply_user_id
    data["reply_status_id"] = reply_status_id
    data["rt_user_id"] = rt_user_id
    data["rt_id"] = rt_id
    return Status(data)

class Diff(object):

    def __init__(self, deletes, inserts, metadata=None):
        self.deletes = deletes
        self.inserts = inserts
        self.metadata = metadata

    def map(self,
            key_func=identity_function,
            value_func=identity_function,
            metadata_func=identity_function):
        return Diff(
            list(map(key_func, self.deletes)),
            [(key_func(k), value_func(v)) for k, v in self.inserts],
            metadata=metadata_func(self.metadata),
        )

    def items(self):
        return itertools.chain(
            ((self.metadata, False, k, None) for k in self.deletes),
            ((self.metadata, True, k, v) for k, v in self.inserts),
        )

    def render(self):
        return "\n".join([
            "@ " + str(self.metadata),
        ] + ["- {0}".format(k) for k in self.deletes]
          + ["+ {0}: {1}".format(k, v) for k, v in self.inserts])

    def render_brief(self):
        return "\n".join(
            ["{0} - {1}".format(self.metadata, k) for k in self.deletes] +
            ["{0} + {1}".format(self.metadata, k) for k, _ in self.inserts])

DEFAULT_DB_FILENAME = "c3r.db"

class Wrapper(object):

    def __init__(self, obj):
        self.__obj = obj

    def __getattr__(self, name):
        return getattr(self.__obj, name)

class DB(object):

    def __init__(self, filename=DEFAULT_DB_FILENAME):
        self.db = sqlite3.connect(filename)

    def user(self, user):
        if isinstance(user, str):
            return self.user(self.get_user_id_by_screen_name(user))
        if isinstance(user, int):
            return self.get_user_by_id(user)
        return user

    def create_statuses_indices(self):
        self.db.execute(
            "CREATE INDEX IF NOT EXISTS index__statuses__by_user_id "
            "ON statuses (user_id)")

    def create_users_indices(self):
        self.db.execute(
            "CREATE INDEX IF NOT EXISTS index__users__by_id "
            "ON users (id)")
        self.db.execute(
            "CREATE INDEX IF NOT EXISTS index__users__by_screen_name "
            "ON users (id, attr, val) "
            "WHERE attr = 'screen_name'")

    def create_user_updates_indices(self):
        self.db.execute(
            "CREATE INDEX IF NOT EXISTS index__user_updates__follow "
            "ON user_updates (id, attr, val) "
            "WHERE attr = 'follower' OR attr = 'following'")

    def get_statuses(self, user=None, users=None, limit=65536, **kwargs):
        self.create_statuses_indices()
        users = [] if users is None else list(users)
        if user is not None:
            users.append(user)
        user_ids = [self.user(user).id for user in users]
        filters = []
        params = []
        for user_id in user_ids:
            if filters:
                filters.append("OR user_id = ?")
            else:
                filters.append("WHERE user_id = ?")
            params.append(user_id)
        return (parse_status(*args) for args in self.db.execute(
            """
            SELECT *
            FROM statuses {0}
            ORDER BY rowid DESC LIMIT ?
            """
            .format(" ".join(filters)),
            params + [limit]))

    def get_user_id_by_screen_name(self, screen_name):
        self.create_users_indices()
        results = tuple(self.db.execute(
            "SELECT id FROM users WHERE attr = 'screen_name' AND val LIKE ?",
            [json.dumps(screen_name)]))
        if not results:
            raise KeyError("cannot find @{0}".format(screen_name))
        return results[0][0]

    def get_user_by_id(self, user_id):
        self.create_users_indices()
        user = User(dict((k, json.loads(v)) for k, v in self.db.execute(
            "SELECT attr, val FROM users WHERE id = ?",
            [user_id])))
        user.id = user_id
        return user

    def get_user_screen_name(self, user_id):
        self.create_users_indices()
        result = tuple(self.db.execute(
            "SELECT val FROM users WHERE id = ? AND attr = 'screen_name'",
            [user_id]))
        if not len(result):
            raise KeyError("cannot find user with ID {0}".format(user_id))
        return json.loads(result[0][0])

    def get_user_history(self, user, reverse=False):
        self.create_user_updates_indices()
        user_id = self.user(user).id
        order = " ORDER BY rowid DESC" if reverse else ""
        return merge_adjacent_diffs([
            Diff([k], [], t)
            if v is None else
            Diff([], [(k, json.loads(v))], t)
            for t, k, v in self.db.execute(
                "SELECT time, attr, val FROM user_updates WHERE id = ?" +
                order, [user_id])])

    def _is_follow_before(self, type, user_id, time, reverse):
        order = " ORDER BY rowid DESC" if reverse else ""
        return bool(tuple(self.db.execute(
            "SELECT 1 FROM user_updates "
            "WHERE attr = '{0}' AND id = ? AND val = 'true' AND time < ?"
            .format(type) + order, [user_id, time])))

    def is_follower_before(self, user_id, time, reverse=False):
        return self._is_follow_before("follower", user_id, time, reverse)

    def is_following_before(self, user_id, time, reverse=False):
        return self._is_follow_before("following", user_id, time, reverse)

    def _get_follow_history(self, type, reverse):
        self.create_user_updates_indices()
        order = " ORDER BY rowid DESC" if reverse else ""
        return merge_adjacent_diffs([
            Diff([], [(k, "")], t)
            if json.loads(v) else
            Diff([k], [], t)
            for t, k, v in self.db.execute(
                "SELECT time, id, val "
                "FROM user_updates "
                "WHERE attr = '{0}'{1}"
                .format(type, order))
            if v is not None])

    def get_follower_history(self, reverse=False):
        return self._get_follow_history("follower", reverse)

    def get_following_history(self, reverse=False):
        return self._get_follow_history("following", reverse)

def merge_diffs(diff1, diff2):
    diff2_deletes = set(diff2.deletes)
    diff1_inserts = [insert for insert in diff1.inserts
                     if insert not in diff2_deletes]
    return Diff(diff1.deletes + diff2.deletes,
                diff1_inserts + diff2.inserts,
                diff1.metadata)

def merge_adjacent_diffs(diffs):
    new_diffs = []
    for diff in diffs:
        if new_diffs and new_diffs[-1].metadata == diff.metadata:
            new_diffs[-1] = merge_diffs(new_diffs[-1], diff)
        else:
            new_diffs.append(diff)
    return new_diffs

@cache_func()
def generate_user_color(user_id):
    import hashlib
    h = hashlib.sha1(str(user_id).encode("ascii")).digest()
    if isinstance(h, str):              # for Python 2 compatibility
        h = bytearray(h)
    i = sum(c << (8 * i) for i, c in enumerate(h))
    return (i - 2) % 6 + 1

class Program(object):

    def __init__(self, db):
        self.db = db

    @cache_func()
    def get_user_screen_name(self, user_id):
        if user_id is None:
            return "???"
        try:
            return self.db.get_user_screen_name(user_id)
        except KeyError:
            return "???"

    @cache_func(filter=lambda x: x == False)
    def is_follower_before(self, user_id, time, reverse):
        return self.db.is_follower_before(user_id, time, reverse)

    @cache_func(filter=lambda x: x == False)
    def is_following_before(self, user_id, time, reverse):
        return self.db.is_following_before(user_id, time, reverse)

    def _followlog(self, name, get_follow_history_func, is_follow_before_func):
        with pager() as stream:
            stream.write("# {0}\n".format(name))
            for diff in get_follow_history_func(reverse=True):
                for time, is_insert, user_id, _ in diff.items():
                    if not (is_insert or
                            is_follow_before_func(user_id, time, reverse=True)):
                        continue
                    stream.write("{0} {1} {2}\n".format(
                        rerender_time(time),
                        "\x1b[1;32m+\x1b[0m" if is_insert else
                        "\x1b[1;31m-\x1b[0m",
                        self.get_user_screen_name(user_id),
                    ))
                    stream.flush()

    def followerlog(self):
        return self._followlog(
            "follower",
            self.db.get_follower_history,
            self.is_follower_before,
        )

    def followinglog(self):
        return self._followlog(
            "following",
            self.db.get_following_history,
            self.is_following_before,
        )

    def userlog(self, user):
        user = self.db.user(user)
        with pager() as stream:
            stream.write("# id: {0}\n".format(user.id))
            for diff in self.db.get_user_history(user, reverse=True):
                diff = diff.map(metadata_func=rerender_time)
                stream.write("\n")
                stream.write(diff.render())
                stream.write("\n")
                stream.flush()

    def statuslog(self, users, limit):
        with pager() as stream:
            for status in self.db.get_statuses(users=users, limit=limit):
                metadata = "{0} {1}".format(
                    status.time.split(".")[0] + "Z",
                    status.id,
                )
                if status.reply_status_id is not None:
                    metadata += " reply:{0}/{1}".format(
                        self.get_user_screen_name(status.reply_user_id),
                        status.reply_status_id,
                    )
                text = status.text.replace("&lt;", "<").replace("&gt;", ">")
                text = wrap_lines(text, prefix="\x1b[1m", suffix="\x1b[0m")
                template = "[\x1b[1;3{1}m{2}\x1b[0m] {0}\n{3}\n\n"
                stream.write(template.format(
                    metadata,
                    generate_user_color(status.user_id),
                    self.get_user_screen_name(status.user_id),
                    text,
                ))
                stream.flush()

def argparser():
    p = argparse.ArgumentParser()
    p.add_argument("-f", "--db", default=DEFAULT_DB_FILENAME)
    sp = p.add_subparsers(help="subcommand")

    spp = sp.add_parser("followerlog")
    spp.set_defaults(func="followerlog")

    spp = sp.add_parser("followinglog")
    spp.set_defaults(func="followinglog")

    spp = sp.add_parser("statuslog")
    spp.add_argument("users", metavar="user", nargs="*")
    spp.add_argument("-n", "--limit", default=65536)
    spp.set_defaults(func="statuslog")

    spp = sp.add_parser("userlog")
    spp.add_argument("user")
    spp.set_defaults(func="userlog")

    return p

def main():
    parser = argparser()
    args = vars(parser.parse_args())
    func = args.pop("func", None)
    if not func:
        parser.print_usage()
        exit(1)
    db = DB(args.pop("db"))
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    try:
        getattr(Program(db), func)(**args)
    except IOError as e:
        import errno
        if e.errno != errno.EPIPE:
            raise

if __name__ == "__main__":
    main()
