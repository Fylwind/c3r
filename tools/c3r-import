#!/usr/bin/env python3
import json, re, sqlite3, sys

def parse_logs():
    state = "/"
    for line in sys.stdin:
        if state == "/":
            m = re.match(r"Date:\s+(\d+)", line)
            if m:
                state = "/commit"
                time = int(m.group(1))
                user = None
                delta = {}
        elif state == "/commit":
            if line.startswith("+++"):
                line = line[6:]
                if line.startswith("users/"):
                    user = int(line[6:].strip())
                else:
                    user = None
            elif line.startswith("+"):
                line = line[1:].rstrip()
                if user is not None:
                    assert line in ("{", "}") or len(line) - len(line.lstrip()) == 4
                    if user in delta:
                        user_delta = delta[user]
                    else:
                        user_delta = []
                        delta[user] = user_delta
                    user_delta.append(line.strip())
            elif line.startswith("commit "):
                state = "/"
                new_delta = {}
                for user, delta_user in delta.items():
                    new_delta_user = {}
                    for line in delta_user:
                        if line in ("{", "}"):
                            continue
                        if line.endswith(","):
                            line = line[:-1]
                        new_delta_user.update(json.loads("{" + line + "}"))
                    new_delta[user] = new_delta_user
                yield time, new_delta
        else:
            assert False


JSON_FORMAT = {"ensure_ascii": False, "indent": 4,
               "separators": (',', ': '), "sort_keys": True}

# ones with 'None' are ignored
# note: always add new ones to the bottom!
schema = [
    ("contributors_enabled", bool),
    ("created_at", str),
    ("default_profile", bool),
    ("default_profile_image", bool),
    ("description", str),
    ("favourites_count", int),
    ("followers_count", int),
    ("friends_count", int),
    ("geo_enabled", bool),
    ("is_translator", bool),
    ("lang", str),
    ("listed_count", int),
    ("location", str),
    ("name", str),
    ("profile_background_color", str),
    ("profile_background_image_url", str),
    ("profile_background_image_url_https", str),
    ("profile_background_tile", bool),
    ("profile_banner_url", str),
    ("profile_image_url", str),
    ("profile_image_url_https", str),
    ("profile_link_color", str),
    ("profile_sidebar_border_color", str),
    ("profile_sidebar_fill_color", str),
    ("profile_text_color", str),
    ("profile_use_background_image", bool),
    ("protected", bool),
    ("screen_name", str),
    ("show_all_inline_media", None),
    ("statuses_count", int),
    ("time_zone", str),
    ("url", str),
    ("utc_offset", int),
    ("verified", bool),
    ("withheld_in_countries", None),
    ("withheld_scope", None),
]
keys = {name: i for i, (name, type) in enumerate(schema) if type is not None}
ignored_keys = {name for name, type in schema if type is None}

db = sqlite3.connect("c3r-import.sqlite3")
cur = db.cursor()
with db:
    cur.execute("CREATE TABLE keys (id INTEGER PRIMARY KEY, name TEXT UNIQUE)")
    cur.execute("CREATE TABLE userlog (time INTEGER, user_id INTEGER, key_id INTEGER, value BLOB)")
    for key_name, key_id in keys.items():
        cur.execute("INSERT INTO keys (id, name) VALUES (?, ?)", (key_id, key_name))
    for time, delta in parse_logs():
        for user_id, delta_user in delta.items():
            for key, value in delta_user.items():
                if key in ignored_keys:
                    continue
                cur.execute("INSERT INTO userlog (time, user_id, key_id, value) VALUES (?, ?, ?, ?)",
                            (time, user_id, keys[key], value))
    cur.execute("CREATE INDEX i__userlog ON userlog(time, user_id, key_id)")

# git log -p --date=raw | python c3r-import.py

#datetime.datetime.utcfromtimestamp()
